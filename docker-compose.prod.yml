version: "3.9"

# Production stack for Oracle Cloud: Nginx reverse proxy, static frontend, API (uvicorn),
# Celery worker, Redis, PostgreSQL. Optimized for Oracle Cloud Infrastructure.

name: seo-analyzer-prod

networks:
  public_net:
    driver: bridge
  internal_net:
    driver: bridge

volumes:
  redis_data:
  app_data:
  nginx_logs:

services:
  reverse-proxy:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./deploy/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - public_net
      - internal_net
    healthcheck:
      test: ["CMD-SHELL", "nginx -t && curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3


  # Backend API (uvicorn) â€” built from production Dockerfile
  api:
    image: seo-analyzer-api:latest
    build:
      context: .
      dockerfile: backend/Dockerfile.prod
    restart: always
    expose:
      - "8000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    # If your Dockerfile already starts uvicorn, you can remove the command below
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    depends_on:
      - redis
    networks:
      - internal_net
    volumes:
      - app_data:/app/data
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport sys,urllib.request\ntry:\n  r=urllib.request.urlopen('http://localhost:8000/health', timeout=3)\n  sys.exit(0 if r.status==200 else 1)\nexcept Exception:\n  sys.exit(1)\nPY"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Celery worker (same image as API for now)
  worker:
    image: seo-analyzer-worker:latest
    build:
      context: .
      dockerfile: backend/Dockerfile.prod
    restart: always
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    command: bash -lc "celery -A celery_app.celery_app worker -Q runs -l info"
    depends_on:
      - redis
    networks:
      - internal_net
    healthcheck:
      test: ["CMD-SHELL", "bash -lc 'celery -A celery_app.celery_app inspect ping -d celery@$HOSTNAME || exit 1'"]
      interval: 30s
      timeout: 5s
      retries: 5


  redis:
    image: redis:7-alpine
    restart: always
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    networks:
      - internal_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

