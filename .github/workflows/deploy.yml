name: Deploy to Oracle Cloud

on:
  push:
    branches: [ main, production, POC ]
  workflow_dispatch:

env:
  ORACLE_HOST: 129.148.63.199
  ORACLE_USER: ubuntu
  DEPLOY_DIR: /opt/seo-analyzer

jobs:
  test-local:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-dev libxslt1-dev
        
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements_basic.txt
        
    - name: Test local environment
      run: |
        cd backend
        python -c "
        import sys
        sys.path.append('.')
        from app.core.config import settings
        from app.models.models import Project, Domain, Prompt
        from app.db.session import engine, SessionLocal
        from app.main import app
        print('✅ All local components working')
        "
        
    - name: Test Docker builds
      run: |
        cd backend
        docker build -f Dockerfile -t seo-analyzer-local .
        docker build -f Dockerfile.prod -t seo-analyzer-prod .
        echo "✅ Docker builds successful"
        
  deploy:
    runs-on: ubuntu-latest
    needs: test-local
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.ORACLE_SSH_KEY }}" > ~/.ssh/oracle_key
        chmod 600 ~/.ssh/oracle_key
        ssh-keyscan -H $ORACLE_HOST >> ~/.ssh/known_hosts
        
    - name: Test SSH connection
      run: |
        ssh -i ~/.ssh/oracle_key -o ConnectTimeout=10 $ORACLE_USER@$ORACLE_HOST "echo 'SSH connection successful'"
        
    - name: Create deployment directory
      run: |
        ssh -i ~/.ssh/oracle_key $ORACLE_USER@$ORACLE_HOST "sudo mkdir -p $DEPLOY_DIR && sudo chown -R $ORACLE_USER:$ORACLE_USER $DEPLOY_DIR"
        
    - name: Copy files to server
      run: |
        ssh -i ~/.ssh/oracle_key $ORACLE_USER@$ORACLE_HOST "sudo rm -rf /tmp/deploy-staging && mkdir -p /tmp/deploy-staging"
        rsync -avz --delete -e "ssh -i ~/.ssh/oracle_key" --exclude 'node_modules' --exclude '.git' --exclude '__pycache__' --exclude '*.pyc' --exclude '.env' --exclude '.github' ./ $ORACLE_USER@$ORACLE_HOST:/tmp/deploy-staging/
        ssh -i ~/.ssh/oracle_key $ORACLE_USER@$ORACLE_HOST "sudo cp -r /tmp/deploy-staging/* $DEPLOY_DIR/ && sudo chown -R $ORACLE_USER:$ORACLE_USER $DEPLOY_DIR && rm -rf /tmp/deploy-staging"
          
    - name: Create environment file
      run: |
        ssh -i ~/.ssh/oracle_key $ORACLE_USER@$ORACLE_HOST 'cd '$DEPLOY_DIR' && cat > .env << "ENVEOF"
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        REDIS_URL=redis://redis:6379/0
        ENVIRONMENT=production
        LOG_LEVEL=INFO
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        ALLOWED_HOSTS='$ORACLE_HOST',localhost,127.0.0.1
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
        PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}
        SERPAPI_KEY=${{ secrets.SERPAPI_KEY }}
        CORS_ORIGINS=http://'$ORACLE_HOST',http://localhost:3000
        SECURE_COOKIES=false
        SESSION_TIMEOUT=3600
        MAX_WORKERS=4
        WORKER_TIMEOUT=300
        MAX_CONCURRENT_RUNS=5
        ENABLE_METRICS=true
        DB_CONNECT_TIMEOUT=60
        DB_COMMAND_TIMEOUT=120
        ENVEOF'
        
    - name: Stop existing services
      run: |
        ssh -i ~/.ssh/oracle_key $ORACLE_USER@$ORACLE_HOST 'cd '$DEPLOY_DIR' && if [ -f docker-compose.prod.yml ]; then sudo docker compose -f docker-compose.prod.yml down || true; fi'
        
    - name: Build and start services
      run: |
        ssh -i ~/.ssh/oracle_key $ORACLE_USER@$ORACLE_HOST 'cd '$DEPLOY_DIR' && sudo docker compose -f docker-compose.prod.yml build --no-cache && sudo docker compose -f docker-compose.prod.yml up -d'
        
    - name: Wait for services to start
      run: |
        sleep 45
        ssh -i ~/.ssh/oracle_key $ORACLE_USER@$ORACLE_HOST 'cd '$DEPLOY_DIR' && sudo docker compose -f docker-compose.prod.yml ps'
        
    - name: Debug container status and run migrations
      run: |
        sleep 60
        echo "Checking container status and logs..."
        ssh -i ~/.ssh/oracle_key $ORACLE_USER@$ORACLE_HOST 'cd '$DEPLOY_DIR' && 
        echo "=== Container Status ==="
        sudo docker compose -f docker-compose.prod.yml ps
        
        echo "=== API Container Logs (last 50 lines) ==="
        sudo docker compose -f docker-compose.prod.yml logs --tail=50 api
        
        echo "=== Checking if API container keeps restarting ==="
        for j in {1..5}; do
          STATUS=$(sudo docker compose -f docker-compose.prod.yml ps api --format "table {{.State}}" | tail -n +2)
          echo "API Status: $STATUS"
          if [[ "$STATUS" == "running" ]]; then
            echo "API container is stable, proceeding with migration"
            break
          else
            echo "API container not stable, waiting 15 seconds... ($j/5)"
            sleep 15
          fi
        done
        
        # Try migration only if container is stable
        if [[ "$STATUS" == "running" ]]; then
          echo "=== Running Database Migration ==="
          sudo docker compose -f docker-compose.prod.yml exec -T api python -c "import sys; from app.db.session import engine; from app.models.models import Base; Base.metadata.create_all(bind=engine); print(\"Database tables created successfully\")" || echo "Migration failed but continuing"
        else
          echo "⚠️ API container unstable, skipping migration"
        fi'
        
    - name: Verify deployment with retry
      run: |
        echo "Waiting for API to be ready..."
        for i in {1..6}; do
          echo "Health check attempt $i/6"
          if curl -f -s http://$ORACLE_HOST/health > /dev/null; then
            echo "✅ Deployment successful - Health check passed"
            exit 0
          fi
          echo "Health check failed, waiting 15 seconds..."
          sleep 15
        done
        echo "❌ Health check failed after 6 attempts"
        ssh -i ~/.ssh/oracle_key $ORACLE_USER@$ORACLE_HOST 'cd '$DEPLOY_DIR' && sudo docker compose -f docker-compose.prod.yml logs api --tail=10'
        exit 1
        
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/oracle_key
